var SideDrawer = (function (exports) {
  'use strict';

  var css = ":host {\n  background-color: #ffffff;\n  width: 350px;\n  max-width: 75vw;\n\n  visibility: hidden;\n  transition: visibility 0.5s;\n}\n\n:host([open]) {\n  visibility: visible;\n}\n\n::slotted(div) {\n  box-sizing: border-box;\n}\n\n#d {\n  position: fixed;\n  z-index: 99;\n  background-color: inherit;\n  -webkit-overflow-scrolling: touch;\n  overflow: auto;\n  -ms-scroll-chaining: none;\n      overscroll-behavior: contain;\n  -webkit-backdrop-filter: var(--side-drawer-backdrop-filter, none);\n          backdrop-filter: var(--side-drawer-backdrop-filter, none);\n\n  top: 0;\n  bottom: 0;\n  left: 0;\n  height: 100%;\n  box-sizing: border-box;\n  -webkit-transform: translateX(-100%);\n          transform: translateX(-100%);\n  transition: -webkit-transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n  transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n  transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n  width: inherit;\n  max-width: inherit;\n  border-top-right-radius: inherit;\n  border-bottom-right-radius: inherit;\n}\n\n:host([open]) #d {\n  -webkit-transform: none;\n          transform: none;\n  box-shadow: 0px 0px 25px 0px rgba(0, 0, 0, 0.5);\n}\n\n#fs {\n  position: fixed;\n  z-index: 98;\n  background-color: #000000;\n  -webkit-backdrop-filter: var(--side-drawer-backdrop-filter, none);\n          backdrop-filter: var(--side-drawer-backdrop-filter, none);\n\n  top: 0;\n  bottom: 0;\n  right: -30px; /* hide scrollbar until overscroll bug is fixed */\n  height: 100vh;\n  transition: var(\n    --side-drawer-overlay-transition,\n    opacity 0.25s ease-in-out 0.25s\n  );\n  width: calc(\n    100vw + 30px\n  ); /* put back to just 100vw once overscroll bug fixed */\n  opacity: 0;\n  visibility: hidden;\n\n  overflow: auto;\n  -ms-scroll-chaining: none;\n      overscroll-behavior: contain;\n}\n\n:host([open]) #fs {\n  opacity: var(--side-drawer-overlay-opacity, 0.7);\n  visibility: visible;\n}\n\n/*\n * Workaround for bug https://bugs.chromium.org/p/chromium/issues/detail?id=813094\n * Once bug is fixed and in the wild we can remove this element and make #if overflow:hidden\n * and set \"right: 0; width: 100vw\" for #fs\n */\n#ifs {\n  height: calc(100vh + 1px);\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlLmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLHlCQUF5QjtFQUN6QixZQUFZO0VBQ1osZUFBZTs7RUFFZixrQkFBa0I7RUFDbEIsMkJBQTJCO0FBQzdCOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLFdBQVc7RUFDWCx5QkFBeUI7RUFDekIsaUNBQWlDO0VBQ2pDLGNBQWM7RUFDZCx5QkFBNEI7TUFBNUIsNEJBQTRCO0VBQzVCLGlFQUF5RDtVQUF6RCx5REFBeUQ7O0VBRXpELE1BQU07RUFDTixTQUFTO0VBQ1QsT0FBTztFQUNQLFlBQVk7RUFDWixzQkFBc0I7RUFDdEIsb0NBQTRCO1VBQTVCLDRCQUE0QjtFQUM1QiwrREFBdUQ7RUFBdkQsdURBQXVEO0VBQXZELDRHQUF1RDtFQUN2RCxjQUFjO0VBQ2Qsa0JBQWtCO0VBQ2xCLGdDQUFnQztFQUNoQyxtQ0FBbUM7QUFDckM7O0FBRUE7RUFDRSx1QkFBZTtVQUFmLGVBQWU7RUFDZiwrQ0FBK0M7QUFDakQ7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsV0FBVztFQUNYLHlCQUF5QjtFQUN6QixpRUFBeUQ7VUFBekQseURBQXlEOztFQUV6RCxNQUFNO0VBQ04sU0FBUztFQUNULFlBQVksRUFBRSxpREFBaUQ7RUFDL0QsYUFBYTtFQUNiOzs7R0FHQztFQUNEOztHQUVDLEVBQUUscURBQXFEO0VBQ3hELFVBQVU7RUFDVixrQkFBa0I7O0VBRWxCLGNBQWM7RUFDZCx5QkFBNEI7TUFBNUIsNEJBQTRCO0FBQzlCOztBQUVBO0VBQ0UsZ0RBQWdEO0VBQ2hELG1CQUFtQjtBQUNyQjs7QUFFQTs7OztFQUlFO0FBQ0Y7RUFDRSx5QkFBeUI7QUFDM0IiLCJmaWxlIjoic3R5bGUuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiOmhvc3Qge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xuICB3aWR0aDogMzUwcHg7XG4gIG1heC13aWR0aDogNzV2dztcblxuICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIHRyYW5zaXRpb246IHZpc2liaWxpdHkgMC41cztcbn1cblxuOmhvc3QoW29wZW5dKSB7XG4gIHZpc2liaWxpdHk6IHZpc2libGU7XG59XG5cbjo6c2xvdHRlZChkaXYpIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cblxuI2Qge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHotaW5kZXg6IDk5O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0O1xuICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7XG4gIG92ZXJmbG93OiBhdXRvO1xuICBvdmVyc2Nyb2xsLWJlaGF2aW9yOiBjb250YWluO1xuICBiYWNrZHJvcC1maWx0ZXI6IHZhcigtLXNpZGUtZHJhd2VyLWJhY2tkcm9wLWZpbHRlciwgbm9uZSk7XG5cbiAgdG9wOiAwO1xuICBib3R0b206IDA7XG4gIGxlZnQ6IDA7XG4gIGhlaWdodDogMTAwJTtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKTtcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuNXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTtcbiAgd2lkdGg6IGluaGVyaXQ7XG4gIG1heC13aWR0aDogaW5oZXJpdDtcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IGluaGVyaXQ7XG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiBpbmhlcml0O1xufVxuXG46aG9zdChbb3Blbl0pICNkIHtcbiAgdHJhbnNmb3JtOiBub25lO1xuICBib3gtc2hhZG93OiAwcHggMHB4IDI1cHggMHB4IHJnYmEoMCwgMCwgMCwgMC41KTtcbn1cblxuI2ZzIHtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB6LWluZGV4OiA5ODtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDAwMDtcbiAgYmFja2Ryb3AtZmlsdGVyOiB2YXIoLS1zaWRlLWRyYXdlci1iYWNrZHJvcC1maWx0ZXIsIG5vbmUpO1xuXG4gIHRvcDogMDtcbiAgYm90dG9tOiAwO1xuICByaWdodDogLTMwcHg7IC8qIGhpZGUgc2Nyb2xsYmFyIHVudGlsIG92ZXJzY3JvbGwgYnVnIGlzIGZpeGVkICovXG4gIGhlaWdodDogMTAwdmg7XG4gIHRyYW5zaXRpb246IHZhcihcbiAgICAtLXNpZGUtZHJhd2VyLW92ZXJsYXktdHJhbnNpdGlvbixcbiAgICBvcGFjaXR5IDAuMjVzIGVhc2UtaW4tb3V0IDAuMjVzXG4gICk7XG4gIHdpZHRoOiBjYWxjKFxuICAgIDEwMHZ3ICsgMzBweFxuICApOyAvKiBwdXQgYmFjayB0byBqdXN0IDEwMHZ3IG9uY2Ugb3ZlcnNjcm9sbCBidWcgZml4ZWQgKi9cbiAgb3BhY2l0eTogMDtcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xuXG4gIG92ZXJmbG93OiBhdXRvO1xuICBvdmVyc2Nyb2xsLWJlaGF2aW9yOiBjb250YWluO1xufVxuXG46aG9zdChbb3Blbl0pICNmcyB7XG4gIG9wYWNpdHk6IHZhcigtLXNpZGUtZHJhd2VyLW92ZXJsYXktb3BhY2l0eSwgMC43KTtcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbn1cblxuLypcbiAqIFdvcmthcm91bmQgZm9yIGJ1ZyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MTMwOTRcbiAqIE9uY2UgYnVnIGlzIGZpeGVkIGFuZCBpbiB0aGUgd2lsZCB3ZSBjYW4gcmVtb3ZlIHRoaXMgZWxlbWVudCBhbmQgbWFrZSAjaWYgb3ZlcmZsb3c6aGlkZGVuXG4gKiBhbmQgc2V0IFwicmlnaHQ6IDA7IHdpZHRoOiAxMDB2d1wiIGZvciAjZnNcbiAqL1xuI2lmcyB7XG4gIGhlaWdodDogY2FsYygxMDB2aCArIDFweCk7XG59XG4iXX0= */";

  var template = "<div id=\"d\"><slot></slot></div>\n<div id=\"fs\"><div id=\"ifs\"></div></div>\n";

  // @ts-ignore
  // using a template so it only needs to be parsed once, whereas setting
  // innerHTML directly in the custom element ctor means the HTML would get parsed
  // for every custom element on the page
  const tmpl = document.createElement("template");
  tmpl.innerHTML = `<style>${css}</style>${template}`;
  var KEYCODE;
  (function (KEYCODE) {
      KEYCODE[KEYCODE["ESC"] = 27] = "ESC";
  })(KEYCODE || (KEYCODE = {}));
  class SideDrawer extends HTMLElement {
      constructor() {
          super();
          // from https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties
          this.upgradeProperty = (prop) => {
              if (this.hasOwnProperty(prop)) {
                  let value = this[prop];
                  delete this[prop];
                  this[prop] = value;
              }
          };
          this.handleKeyUp = (e) => {
              if (e.altKey) {
                  return;
              }
              switch (e.keyCode) {
                  case KEYCODE.ESC:
                      e.preventDefault();
                      this.open = false;
                      break;
              }
          };
          this.handleFreeSpaceDivClick = (_e) => {
              this.open = false;
          };
          const shadowRoot = this.attachShadow({ mode: "open" });
          shadowRoot.appendChild(tmpl.content.cloneNode(true));
          this._freeSpaceDiv = shadowRoot.getElementById("fs");
      }
      connectedCallback() {
          if (this._freeSpaceDiv) {
              this._freeSpaceDiv.addEventListener("click", this.handleFreeSpaceDivClick);
          }
          this.upgradeProperty("open");
      }
      disconnectedCallback() {
          document.removeEventListener("keyup", this.handleKeyUp);
      }
      get open() {
          return this.hasAttribute("open");
      }
      set open(isOpen) {
          if (isOpen) {
              if (!this.hasAttribute("open")) {
                  this.setAttribute("open", "");
              }
          }
          else {
              if (this.hasAttribute("open")) {
                  this.removeAttribute("open");
              }
          }
      }
      static get observedAttributes() {
          return ["open"];
      }
      // private _bodyOverflow: string | null | undefined;
      // private _bodyPosition: string | null | undefined;
      attributeChangedCallback(_name, _oldValue, _newValue) {
          if (_name === "open") {
              // When the drawer is closed, update keyboard/screen reader behavior.
              if (!this.open) {
                  this.setAttribute("tabindex", "-1");
                  this.setAttribute("aria-disabled", "true");
                  document.removeEventListener("keyup", this.handleKeyUp);
                  // if (this._bodyOverflow !== undefined) {
                  //   document.body.style.overflow = this._bodyOverflow;
                  // }
                  // if (this._bodyPosition !== undefined) {
                  //   document.body.style.position = this._bodyPosition;
                  // }
                  this.dispatchEvent(new CustomEvent("close", {
                      bubbles: true
                  }));
              }
              else {
                  this.setAttribute("tabindex", "0");
                  this.setAttribute("aria-disabled", "false");
                  this.focus({
                      preventScroll: true
                  });
                  document.addEventListener("keyup", this.handleKeyUp);
                  // to prevent body behind drawer from scrolling you need
                  // to set overflow to hidden and position to fixed (for iOS)
                  // TODO: this is too buggy
                  // this._bodyOverflow = document.body.style.overflow;
                  // document.body.style.overflow = "hidden";
                  // this._bodyPosition = document.body.style.position;
                  // document.body.style.position = "fixed";
                  this.dispatchEvent(new CustomEvent("open", {
                      bubbles: true
                  }));
              }
          }
      }
  }
  customElements.define("side-drawer", SideDrawer);

  exports.SideDrawer = SideDrawer;

  return exports;

}({}));
